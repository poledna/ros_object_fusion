{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"loggin",
				"Logging_Format"
			],
			[
				"objec",
				"object_fusion_pypkg"
			],
			[
				"log",
				"log_format"
			],
			[
				"clas",
				"Classification"
			],
			[
				"Cla",
				"Classification"
			],
			[
				"ob",
				"object_fusion_msgs"
			],
			[
				"adma",
				"adma_sub"
			],
			[
				"sens",
				"sensors_fused"
			],
			[
				"se",
				"self"
			],
			[
				"to_",
				"to_ros_msg"
			],
			[
				"tra",
				"tracked_object"
			],
			[
				"def",
				"defs"
			],
			[
				"obje",
				"object_fusion_id"
			],
			[
				"curr",
				"current_object"
			],
			[
				"curre",
				"current_object"
			],
			[
				"sensor_ob",
				"sensor_object_benifit"
			],
			[
				"cu",
				"current_object"
			],
			[
				"sen",
				"sensor_property"
			],
			[
				"pro",
				"prop_existence"
			],
			[
				"glbo",
				"globaltrack"
			],
			[
				"obj",
				"object_index"
			],
			[
				"globar",
				"globaltrack_predicted"
			],
			[
				"defs",
				"defs"
			],
			[
				"ass",
				"assign"
			],
			[
				"tr",
				"tracked_objects"
			],
			[
				"cos",
				"cost_matrix"
			],
			[
				"fus",
				"fused_object"
			],
			[
				"Global",
				"Global_Track"
			],
			[
				"cla",
				"class"
			],
			[
				"senso",
				"sensor_property"
			],
			[
				"Trac",
				"Tracked_Object"
			],
			[
				"Ob",
				"ObjectList"
			],
			[
				"__",
				"__init__"
			],
			[
				"add",
				"add_sensor_objects"
			],
			[
				"Tra",
				"Tracked_Object"
			],
			[
				"de",
				"defs"
			],
			[
				"current",
				"current_timestamp"
			],
			[
				"tRA",
				"Tracked_Object"
			],
			[
				"track",
				"tracked_objects"
			],
			[
				"cost_",
				"cost_matrix_B"
			],
			[
				"assign",
				"assignment_matrix"
			],
			[
				"loa",
				"load_dimension"
			],
			[
				"add_ob",
				"add_object"
			],
			[
				"tracked",
				"tracked_objects"
			],
			[
				"chec",
				"check_object"
			],
			[
				"to",
				"tolerance"
			],
			[
				"t",
				"threshold"
			],
			[
				"gl",
				"globaltrack"
			],
			[
				"cre",
				"create_threshold_matrix"
			],
			[
				"crea",
				"create_cost_matrix_A"
			],
			[
				"sensor",
				"sensorslist"
			],
			[
				"Ca",
				"CallbackFusion"
			],
			[
				"radar",
				"radar_msg"
			],
			[
				"pr",
				"prediction"
			],
			[
				"re",
				"return"
			],
			[
				"tf",
				"tf2_ros"
			],
			[
				"Po",
				"PointStamped"
			],
			[
				"Obje",
				"ObjectsList"
			],
			[
				"detec",
				"detectionInfo"
			],
			[
				"PointStamp",
				"PointStamped_class"
			],
			[
				"pre",
				"prediction"
			],
			[
				"Kitti",
				"Kitti_Detection_Format_Tracked"
			],
			[
				"oc",
				"occlusion"
			],
			[
				"Dete",
				"detectionInfo"
			],
			[
				"Fe",
				"Features"
			],
			[
				"fea",
				"features"
			],
			[
				"Cl",
				"Classification"
			],
			[
				"le",
				"length"
			],
			[
				"Dime",
				"Dimension"
			],
			[
				"id_",
				"id_hash"
			],
			[
				"Sen",
				"SensorProperty"
			],
			[
				"Objec",
				"ObjectsList"
			],
			[
				"p",
				"print"
			],
			[
				"m",
				"marker_array"
			],
			[
				"marke",
				"marker_array"
			],
			[
				"rada",
				"radar_object"
			],
			[
				"radar_",
				"radar_object"
			],
			[
				"ca",
				"callback"
			],
			[
				"if",
				"ifmain"
			],
			[
				"mat",
				"match"
			],
			[
				"prope",
				"property"
			],
			[
				"mo",
				"model_spec"
			],
			[
				"ki",
				"kitti_detection_array"
			],
			[
				"kitt",
				"kitti_msg"
			],
			[
				"mark",
				"marker"
			],
			[
				"mai",
				"ifmain"
			],
			[
				"Ma",
				"Marker"
			],
			[
				"ma",
				"marker"
			],
			[
				"mar",
				"marker_array"
			],
			[
				"publish",
				"publisher"
			],
			[
				"main",
				"ifmain"
			],
			[
				"new",
				"new_cam_mtx"
			],
			[
				"cam",
				"cam_mtx"
			],
			[
				"bottom",
				"bottomy"
			],
			[
				"imag",
				"image_ud"
			],
			[
				"IM",
				"image_distort"
			],
			[
				"im",
				"im_gray"
			],
			[
				"I",
				"IMAGE_PATH"
			],
			[
				"pts",
				"pts_distort"
			],
			[
				"pt",
				"pts_distort"
			],
			[
				"ima",
				"image"
			],
			[
				"cor",
				"corners_3D"
			],
			[
				"co",
				"corners_2D"
			],
			[
				"dat",
				"data_point"
			],
			[
				"cal",
				"callback_raw"
			],
			[
				"oint",
				"point"
			],
			[
				"TARGE",
				"TARGET_SHAPE"
			],
			[
				"ad",
				"adma_data"
			],
			[
				"con",
				"corners_3D"
			],
			[
				"ke",
				"keypoint"
			],
			[
				"tras",
				"trans_mat"
			],
			[
				"ra",
				"radar_point"
			],
			[
				"pitc",
				"pitch_adma"
			],
			[
				"poi",
				"points"
			],
			[
				"transla",
				"translation"
			],
			[
				"ro",
				"rotation_matrix"
			],
			[
				"in",
				"intrinsics"
			],
			[
				"rot",
				"rotZ"
			],
			[
				"__i",
				"__init__"
			],
			[
				"camera",
				"camera_img"
			],
			[
				"came",
				"camera_img"
			],
			[
				"can",
				"cam_points_top"
			],
			[
				"as_",
				"as_matrix"
			],
			[
				"uin",
				"uint16"
			],
			[
				"target_",
				"TARGET_SHAPE"
			],
			[
				"ast",
				"astype"
			],
			[
				"fi",
				"figure"
			],
			[
				"figu",
				"figure"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/object_fusion_pypkg/Fusion.py",
			"settings":
			{
				"buffer_size": 20444,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					22,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAF4AAAAAAAAAXwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF4AAAAAAAAAXgAAAAAAAAAAAAAAAADwvw"
				],
				[
					23,
					1,
					"left_delete",
					null,
					"AQAAAF4AAAAAAAAAXgAAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF8AAAAAAAAAXwAAAAAAAAAAAAAAAADwvw"
				],
				[
					32,
					1,
					"insert",
					{
						"characters": "\nfronm"
					},
					"BgAAAFYAAAAAAAAAVwAAAAAAAAAAAAAAVwAAAAAAAABYAAAAAAAAAAAAAABYAAAAAAAAAFkAAAAAAAAAAAAAAFkAAAAAAAAAWgAAAAAAAAAAAAAAWgAAAAAAAABbAAAAAAAAAAAAAABbAAAAAAAAAFwAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFYAAAAAAAAAVgAAAAAAAAAAAAAAAADwvw"
				],
				[
					33,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAFwAAAAAAAAAXQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFwAAAAAAAAAXAAAAAAAAAAAAAAAAADwvw"
				],
				[
					34,
					3,
					"left_delete",
					null,
					"AwAAAFwAAAAAAAAAXAAAAAAAAAABAAAAIFsAAAAAAAAAWwAAAAAAAAABAAAAbVoAAAAAAAAAWgAAAAAAAAABAAAAbg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					35,
					1,
					"insert",
					{
						"characters": "m"
					},
					"AQAAAFoAAAAAAAAAWwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFoAAAAAAAAAWgAAAAAAAAAAAAAAAADwvw"
				],
				[
					36,
					1,
					"insert",
					{
						"characters": " ."
					},
					"AgAAAFsAAAAAAAAAXAAAAAAAAAAAAAAAXAAAAAAAAABdAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFsAAAAAAAAAWwAAAAAAAAAAAAAAAADwvw"
				],
				[
					37,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAF0AAAAAAAAAXgAAAAAAAAAAAAAAXgAAAAAAAABfAAAAAAAAAAAAAABfAAAAAAAAAGAAAAAAAAAAAAAAAGAAAAAAAAAAYQAAAAAAAAAAAAAAYQAAAAAAAABiAAAAAAAAAAAAAABiAAAAAAAAAGMAAAAAAAAAAAAAAGMAAAAAAAAAZAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAF0AAAAAAAAAXQAAAAAAAAAAAAAAAADwvw"
				],
				[
					38,
					1,
					"insert",
					{
						"characters": " loggin"
					},
					"BwAAAGQAAAAAAAAAZQAAAAAAAAAAAAAAZQAAAAAAAABmAAAAAAAAAAAAAABmAAAAAAAAAGcAAAAAAAAAAAAAAGcAAAAAAAAAaAAAAAAAAAAAAAAAaAAAAAAAAABpAAAAAAAAAAAAAABpAAAAAAAAAGoAAAAAAAAAAAAAAGoAAAAAAAAAawAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGQAAAAAAAAAZAAAAAAAAAAAAAAAAADwvw"
				],
				[
					42,
					1,
					"insert_completion",
					{
						"completion": "Logging_Format",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "Logging_Format"
					},
					"AgAAAGUAAAAAAAAAZQAAAAAAAAAFAAAAbG9nZ2llAAAAAAAAAHMAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGoAAAAAAAAAagAAAAAAAAAAAAAAAADwvw"
				],
				[
					50,
					1,
					"paste",
					null,
					"AQAAAGUAAAAAAAAAbwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAGUAAAAAAAAAZQAAAAAAAAAAAAAAAADwvw"
				],
				[
					51,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAG8AAAAAAAAAcAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8AAAAAAAAAbwAAAAAAAAAAAAAAAADwvw"
				],
				[
					54,
					1,
					"right_delete",
					null,
					"AQAAAG8AAAAAAAAAbwAAAAAAAAAQAAAALkxvZ2dpbmdfRm9ybWF0bg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAG8AAAAAAAAAfwAAAAAAAAD////////vfw"
				],
				[
					58,
					2,
					"left_delete",
					null,
					"AgAAAHAAAAAAAAAAcAAAAAAAAAAgAAAAaW1wb3J0IGxvZ19mb3JtYXQuTG9nZ2luZ19Gb3JtYXRvAAAAAAAAAG8AAAAAAAAAAQAAAAo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAJAAAAAAAAAAcAAAAAAAAAAAAAAAAAAAAA"
				],
				[
					62,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BQAAAHEAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAAByAAAAAAAAAAYAAABpbXBvcnRyAAAAAAAAAHMAAAAAAAAAAAAAAHMAAAAAAAAAdAAAAAAAAAAAAAAAdAAAAAAAAAB1AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcAAAAAAAAAcQAAAAAAAAAAAAAAAAAAAA"
				],
				[
					63,
					1,
					"insert",
					{
						"characters": " ./"
					},
					"AwAAAHUAAAAAAAAAdgAAAAAAAAAAAAAAdgAAAAAAAAB3AAAAAAAAAAAAAAB3AAAAAAAAAHgAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHUAAAAAAAAAdQAAAAAAAAAAAAAAAADwvw"
				],
				[
					64,
					1,
					"left_delete",
					null,
					"AQAAAHcAAAAAAAAAdwAAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHgAAAAAAAAAeAAAAAAAAAAAAAAAAADwvw"
				],
				[
					65,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAAHcAAAAAAAAAeAAAAAAAAAAAAAAAeAAAAAAAAAB5AAAAAAAAAAAAAAB5AAAAAAAAAHoAAAAAAAAAAAAAAHoAAAAAAAAAewAAAAAAAAAAAAAAewAAAAAAAAB8AAAAAAAAAAAAAAB8AAAAAAAAAH0AAAAAAAAAAAAAAH0AAAAAAAAAfgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAHcAAAAAAAAAdwAAAAAAAAAAAAAAAADwvw"
				],
				[
					67,
					4,
					"left_delete",
					null,
					"BAAAAIsAAAAAAAAAiwAAAAAAAAABAAAAb4oAAAAAAAAAigAAAAAAAAABAAAAZ4kAAAAAAAAAiQAAAAAAAAABAAAARYgAAAAAAAAAiAAAAAAAAAABAAAALg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIwAAAAAAAAAjAAAAAAAAAD////////vfw"
				],
				[
					72,
					1,
					"insert",
					{
						"characters": "."
					},
					"AgAAAI8AAAAAAAAAkAAAAAAAAAAAAAAAkAAAAAAAAACQAAAAAAAAAAwAAABHbG9iYWxPYmplY3Q",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAI8AAAAAAAAAmwAAAAAAAAAAAAAAAADwvw"
				],
				[
					77,
					1,
					"insert",
					{
						"characters": "."
					},
					"AgAAAKsAAAAAAAAArAAAAAAAAAAAAAAArAAAAAAAAACsAAAAAAAAAAwAAABTZW5zb3JPYmplY3Q",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKsAAAAAAAAAtwAAAAAAAAAAAAAAAADwvw"
				],
				[
					80,
					1,
					"insert",
					{
						"characters": "import"
					},
					"BgAAACAAAAAAAAAAIQAAAAAAAAAAAAAAIQAAAAAAAAAiAAAAAAAAAAAAAAAiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAAlAAAAAAAAACYAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACAAAAAAAAAAIAAAAAAAAAAAAAAAAADwvw"
				],
				[
					81,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAACYAAAAAAAAAJwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACYAAAAAAAAAJgAAAAAAAAAAAAAAAADwvw"
				],
				[
					82,
					1,
					"",
					null,
					"AQAAACcAAAAAAAAAOgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACcAAAAAAAAAJwAAAAAAAAAAAAAAAADwvw"
				],
				[
					83,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAADoAAAAAAAAAOwAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADoAAAAAAAAAOgAAAAAAAAAAAAAAAADwvw"
				],
				[
					86,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AQAAAB8AAAAAAAAAIAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB8AAAAAAAAAHwAAAAAAAAAAAAAAAADwvw"
				],
				[
					98,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"BwAAACMBAAAAAAAAJQEAAAAAAAAAAAAABQEAAAAAAAAHAQAAAAAAAAAAAADeAAAAAAAAAOAAAAAAAAAAAAAAAMIAAAAAAAAAxAAAAAAAAAAAAAAApgAAAAAAAACoAAAAAAAAAAAAAACNAAAAAAAAAI8AAAAAAAAAAAAAAHMAAAAAAAAAdQAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEUBAAAAAAAAcwAAAAAAAAAAAAAAAADwvw"
				],
				[
					101,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAFUBAAAAAAAAVwEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKABAAAAAAAAoAEAAAAAAAAAAAAAAADwvw"
				],
				[
					105,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAKQBAAAAAAAApgEAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAKQBAAAAAAAApAEAAAAAAAAAAAAAAAAAAA"
				],
				[
					110,
					3,
					"right_delete",
					null,
					"AwAAAHMAAAAAAAAAcwAAAAAAAAA/AQAAIyBmcm9tIC4gaW1wb3J0IGxvZ19mb3JtYXQKCiMgZnJvbSAuIGltcG9ydCBlZ29fc3RhdGUKCiMgZnJvbSAuIGltcG9ydCBHbG9iYWxPYmplY3QKCiMgZnJvbSAuIGltcG9ydCBTZW5zb3JPYmplY3QKCiMgaW1wb3J0IHRlbXBvcmFsX2FuZF9zcGF0aWFsX2FsaWdubWVudAoKIyBpbXBvcnQgZXhpc3RlbmNlX2Z1c2lvbi5mdXNlCgojIGltcG9ydCBzdGF0ZV9hbmRfY292YXJpYW5jZV9mdXNpb24KCiMgZnJvbSBjbGFzc2lmaWNhdGlvbl9mdXNpb24uQ2xhc3NpZmljYXRpb25GdXNpb24gaW1wb3J0IENsYXNzaWZpY2F0aW9uRnVzaW9uCgojIGltcG9ydCB0cmFja3MAAAAAAAAAcwAAAAAAAAABAAAACnMAAAAAAAAAcwAAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAALIBAAAAAAAAcwAAAAAAAAAAAAAAAADwvw"
				],
				[
					137,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BQAAACEAAAAAAAAAIgAAAAAAAAAAAAAAIgAAAAAAAAAiAAAAAAAAAAYAAABpbXBvcnQiAAAAAAAAACMAAAAAAAAAAAAAACMAAAAAAAAAJAAAAAAAAAAAAAAAJAAAAAAAAAAlAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACEAAAAAAAAAJwAAAAAAAAAAAAAAAADwvw"
				],
				[
					139,
					1,
					"insert",
					{
						"characters": " impor"
					},
					"BgAAADkAAAAAAAAAOgAAAAAAAAAAAAAAOgAAAAAAAAA7AAAAAAAAAAAAAAA7AAAAAAAAADwAAAAAAAAAAAAAADwAAAAAAAAAPQAAAAAAAAAAAAAAPQAAAAAAAAA+AAAAAAAAAAAAAAA+AAAAAAAAAD8AAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADkAAAAAAAAAOQAAAAAAAAD////////vfw"
				],
				[
					140,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAD8AAAAAAAAAQAAAAAAAAAAAAAAAQAAAAAAAAABBAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8AAAAAAAAAPwAAAAAAAAAAAAAAAADwvw"
				],
				[
					141,
					2,
					"left_delete",
					null,
					"AgAAAEAAAAAAAAAAQAAAAAAAAAABAAAAdD8AAAAAAAAAPwAAAAAAAAABAAAAIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEEAAAAAAAAAQQAAAAAAAAAAAAAAAADwvw"
				],
				[
					142,
					1,
					"insert",
					{
						"characters": "t"
					},
					"AQAAAD8AAAAAAAAAQAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAD8AAAAAAAAAPwAAAAAAAAAAAAAAAADwvw"
				],
				[
					143,
					1,
					"insert",
					{
						"characters": " *"
					},
					"AgAAAEAAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABCAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEAAAAAAAAAAQAAAAAAAAAAAAAAAAADwvw"
				],
				[
					149,
					1,
					"insert",
					{
						"characters": "print"
					},
					"BQAAAEMAAAAAAAAARAAAAAAAAAAAAAAARAAAAAAAAABFAAAAAAAAAAAAAABFAAAAAAAAAEYAAAAAAAAAAAAAAEYAAAAAAAAARwAAAAAAAAAAAAAARwAAAAAAAABIAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEMAAAAAAAAAQwAAAAAAAAAAAAAAAADwvw"
				],
				[
					150,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAEgAAAAAAAAASgAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEgAAAAAAAAASAAAAAAAAAAAAAAAAADwvw"
				],
				[
					151,
					1,
					"insert",
					{
						"characters": "ego_sta"
					},
					"BwAAAEkAAAAAAAAASgAAAAAAAAAAAAAASgAAAAAAAABLAAAAAAAAAAAAAABLAAAAAAAAAEwAAAAAAAAAAAAAAEwAAAAAAAAATQAAAAAAAAAAAAAATQAAAAAAAABOAAAAAAAAAAAAAABOAAAAAAAAAE8AAAAAAAAAAAAAAE8AAAAAAAAAUAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEkAAAAAAAAASQAAAAAAAAAAAAAAAADwvw"
				],
				[
					152,
					1,
					"insert",
					{
						"characters": "te"
					},
					"AgAAAFAAAAAAAAAAUQAAAAAAAAAAAAAAUQAAAAAAAABSAAAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFAAAAAAAAAAUAAAAAAAAAAAAAAAAADwvw"
				],
				[
					165,
					1,
					"left_delete",
					null,
					"AQAAAEMAAAAAAAAAQwAAAAAAAAAQAAAAcHJpbnQoZWdvX3N0YXRlKQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFMAAAAAAAAAQwAAAAAAAAAAAAAAAAAAAA"
				],
				[
					186,
					1,
					"paste",
					null,
					"AgAAAMIkAAAAAAAA6iQAAAAAAAAAAAAA6iQAAAAAAADqJAAAAAAAAA4AAAB0ZW1wX2FsaWdubWVudA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMIkAAAAAAAA0CQAAAAAAAAAAAAAAADwvw"
				],
				[
					191,
					1,
					"paste",
					null,
					"AgAAAOEkAAAAAAAA6yQAAAAAAAAAAAAA6yQAAAAAAADrJAAAAAAAAAkAAABhbGlnbl9vYmo",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOEkAAAAAAAA6iQAAAAAAAAAAAAAAADwvw"
				],
				[
					200,
					1,
					"insert",
					{
						"characters": "calssigf"
					},
					"CAAAADNGAAAAAAAANEYAAAAAAAAAAAAANEYAAAAAAAA1RgAAAAAAAAAAAAA1RgAAAAAAADZGAAAAAAAAAAAAADZGAAAAAAAAN0YAAAAAAAAAAAAAN0YAAAAAAAA4RgAAAAAAAAAAAAA4RgAAAAAAADlGAAAAAAAAAAAAADlGAAAAAAAAOkYAAAAAAAAAAAAAOkYAAAAAAAA7RgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADNGAAAAAAAAM0YAAAAAAAAAAAAAAADwvw"
				],
				[
					201,
					7,
					"left_delete",
					null,
					"BwAAADpGAAAAAAAAOkYAAAAAAAABAAAAZjlGAAAAAAAAOUYAAAAAAAABAAAAZzhGAAAAAAAAOEYAAAAAAAABAAAAaTdGAAAAAAAAN0YAAAAAAAABAAAAczZGAAAAAAAANkYAAAAAAAABAAAAczVGAAAAAAAANUYAAAAAAAABAAAAbDRGAAAAAAAANEYAAAAAAAABAAAAYQ",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADtGAAAAAAAAO0YAAAAAAAAAAAAAAADwvw"
				],
				[
					202,
					1,
					"insert",
					{
						"characters": "lassification"
					},
					"DQAAADRGAAAAAAAANUYAAAAAAAAAAAAANUYAAAAAAAA2RgAAAAAAAAAAAAA2RgAAAAAAADdGAAAAAAAAAAAAADdGAAAAAAAAOEYAAAAAAAAAAAAAOEYAAAAAAAA5RgAAAAAAAAAAAAA5RgAAAAAAADpGAAAAAAAAAAAAADpGAAAAAAAAO0YAAAAAAAAAAAAAO0YAAAAAAAA8RgAAAAAAAAAAAAA8RgAAAAAAAD1GAAAAAAAAAAAAAD1GAAAAAAAAPkYAAAAAAAAAAAAAPkYAAAAAAAA/RgAAAAAAAAAAAAA/RgAAAAAAAEBGAAAAAAAAAAAAAEBGAAAAAAAAQUYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADRGAAAAAAAANEYAAAAAAAAAAAAAAADwvw"
				],
				[
					203,
					1,
					"insert",
					{
						"characters": "_fusion"
					},
					"BwAAAEFGAAAAAAAAQkYAAAAAAAAAAAAAQkYAAAAAAABDRgAAAAAAAAAAAABDRgAAAAAAAERGAAAAAAAAAAAAAERGAAAAAAAARUYAAAAAAAAAAAAARUYAAAAAAABGRgAAAAAAAAAAAABGRgAAAAAAAEdGAAAAAAAAAAAAAEdGAAAAAAAASEYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEFGAAAAAAAAQUYAAAAAAAAAAAAAAADwvw"
				],
				[
					204,
					1,
					"insert",
					{
						"characters": "./"
					},
					"AgAAAEhGAAAAAAAASUYAAAAAAAAAAAAASUYAAAAAAABKRgAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEhGAAAAAAAASEYAAAAAAAAAAAAAAADwvw"
				],
				[
					205,
					1,
					"left_delete",
					null,
					"AQAAAElGAAAAAAAASUYAAAAAAAABAAAALw",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAEpGAAAAAAAASkYAAAAAAAAAAAAAAADwvw"
				],
				[
					238,
					2,
					"right_delete",
					null,
					"AgAAADNGAAAAAAAAM0YAAAAAAAAVAAAAY2xhc3NpZmljYXRpb25fZnVzaW9uM0YAAAAAAAAzRgAAAAAAAAEAAAAu",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADNGAAAAAAAASEYAAAAAAAAAAAAAAADwvw"
				],
				[
					260,
					1,
					"",
					null,
					"CAAAAEpIAAAAAAAAXkgAAAAAAAAVAAAAY2xhc3NpZmljYXRpb25fZnVzaW9uw0cAAAAAAADXRwAAAAAAABUAAABjbGFzc2lmaWNhdGlvbl9mdXNpb25oRgAAAAAAAHxGAAAAAAAAFQAAAGNsYXNzaWZpY2F0aW9uX2Z1c2lvbhtGAAAAAAAAL0YAAAAAAAAVAAAAY2xhc3NpZmljYXRpb25fZnVzaW9uGj8AAAAAAAAuPwAAAAAAABUAAABjbGFzc2lmaWNhdGlvbl9mdXNpb26TPgAAAAAAAKc+AAAAAAAAFQAAAGNsYXNzaWZpY2F0aW9uX2Z1c2lvbjs5AAAAAAAATzkAAAAAAAAVAAAAY2xhc3NpZmljYXRpb25fZnVzaW9u7zgAAAAAAAADOQAAAAAAABUAAABjbGFzc2lmaWNhdGlvbl9mdXNpb24",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABtGAAAAAAAAMEYAAAAAAAAAAAAAAADwvw"
				],
				[
					265,
					1,
					"paste",
					null,
					"AQAAAC5GAAAAAAAAQ0YAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC5GAAAAAAAALkYAAAAAAAAAAAAAAADwvw"
				],
				[
					266,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAENGAAAAAAAAREYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAENGAAAAAAAAQ0YAAAAAAAAAAAAAAADwvw"
				],
				[
					276,
					1,
					"paste",
					null,
					"AQAAAAY5AAAAAAAAGzkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAY5AAAAAAAABjkAAAAAAAAAAAAAAADwvw"
				],
				[
					277,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAABs5AAAAAAAAHDkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAABs5AAAAAAAAGzkAAAAAAAAAAAAAAADwvw"
				],
				[
					299,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAADA5AAAAAAAAMTkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADA5AAAAAAAAMDkAAAAAAAAAAAAAAADwvw"
				],
				[
					300,
					1,
					"paste",
					null,
					"AQAAADE5AAAAAAAARTkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADE5AAAAAAAAMTkAAAAAAAAAAAAAAADwvw"
				],
				[
					308,
					1,
					"insert",
					{
						"characters": "."
					},
					"AQAAAINGAAAAAAAAhEYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAINGAAAAAAAAg0YAAAAAAAAAAAAAAADwvw"
				],
				[
					309,
					1,
					"paste",
					null,
					"AQAAAIRGAAAAAAAAmEYAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAIRGAAAAAAAAhEYAAAAAAAAAAAAAAADwvw"
				],
				[
					363,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"BwAAAB5JAAAAAAAAH0kAAAAAAAAAAAAAH0kAAAAAAAAnSQAAAAAAAAAAAAAnSQAAAAAAAChJAAAAAAAAAAAAAChJAAAAAAAAKUkAAAAAAAAAAAAAKUkAAAAAAAAqSQAAAAAAAAAAAAAqSQAAAAAAACtJAAAAAAAAAAAAACtJAAAAAAAALEkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAB5JAAAAAAAAHkkAAAAAAAAAAAAAAADwvw"
				],
				[
					364,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAACxJAAAAAAAALkkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAACxJAAAAAAAALEkAAAAAAAAAAAAAAADwvw"
				],
				[
					365,
					1,
					"insert",
					{
						"characters": "glbo"
					},
					"BAAAAC1JAAAAAAAALkkAAAAAAAAAAAAALkkAAAAAAAAvSQAAAAAAAAAAAAAvSQAAAAAAADBJAAAAAAAAAAAAADBJAAAAAAAAMUkAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC1JAAAAAAAALUkAAAAAAAAAAAAAAADwvw"
				],
				[
					366,
					2,
					"left_delete",
					null,
					"AgAAADBJAAAAAAAAMEkAAAAAAAABAAAAby9JAAAAAAAAL0kAAAAAAAABAAAAYg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADFJAAAAAAAAMUkAAAAAAAAAAAAAAADwvw"
				],
				[
					367,
					1,
					"insert",
					{
						"characters": "obal_"
					},
					"BQAAAC9JAAAAAAAAMEkAAAAAAAAAAAAAMEkAAAAAAAAxSQAAAAAAAAAAAAAxSQAAAAAAADJJAAAAAAAAAAAAADJJAAAAAAAAM0kAAAAAAAAAAAAAM0kAAAAAAAA0SQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAC9JAAAAAAAAL0kAAAAAAAAAAAAAAADwvw"
				],
				[
					368,
					1,
					"insert",
					{
						"characters": "state"
					},
					"BQAAADRJAAAAAAAANUkAAAAAAAAAAAAANUkAAAAAAAA2SQAAAAAAAAAAAAA2SQAAAAAAADdJAAAAAAAAAAAAADdJAAAAAAAAOEkAAAAAAAAAAAAAOEkAAAAAAAA5SQAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAADRJAAAAAAAANEkAAAAAAAAAAAAAAADwvw"
				],
				[
					379,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAMY/AAAAAAAAxz8AAAAAAAAAAAAAxz8AAAAAAADPPwAAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMY/AAAAAAAAxj8AAAAAAAAAAAAAAADwvw"
				],
				[
					380,
					1,
					"paste",
					null,
					"AQAAAM8/AAAAAAAA4j8AAAAAAAAAAAAA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAM8/AAAAAAAAzz8AAAAAAAAAAAAAAADwvw"
				],
				[
					409,
					4,
					"left_delete",
					null,
					"BAAAAENJAAAAAAAAQ0kAAAAAAAATAAAAcHJpbnQoZ2xvYmFsX3N0YXRlKT9JAAAAAAAAP0kAAAAAAAAEAAAAICAgIDtJAAAAAAAAO0kAAAAAAAAEAAAAICAgIDpJAAAAAAAAOkkAAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAFZJAAAAAAAAQ0kAAAAAAAAAAAAAAABcQA"
				],
				[
					413,
					3,
					"left_delete",
					null,
					"AwAAAM8/AAAAAAAAzz8AAAAAAAATAAAAcHJpbnQoZ2xvYmFsX3N0YXRlKcs/AAAAAAAAyz8AAAAAAAAEAAAAICAgIMc/AAAAAAAAxz8AAAAAAAAEAAAAICAgIA",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAOI/AAAAAAAAzz8AAAAAAAAAAAAAAABcQA"
				],
				[
					414,
					1,
					"left_delete",
					null,
					"AQAAAMY/AAAAAAAAxj8AAAAAAAABAAAACg",
					"BgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAMc/AAAAAAAAxz8AAAAAAAAAAAAAAADwvw"
				],
				[
					3,
					1,
					"auto_pep8_replace",
					{
						"a": 0,
						"b": 19839,
						"text": "import numpy as np\nimport rospy\n\nfrom object_fusion_pypkg import *\n\nimport logging\nfrom threading import Lock\nimport sys\n\n\nclass Fusion:\n    def __init__(self):\n        self.egoveh = ego_state.Ego()  # consists of updated ego parameters\n\n        self.globaltrack = track.Global_Track()\n\n        self.sensors = {}   # list of sensor objectlists\n\n        self.cost_matrix_A = None\n        self.cost_matrix_B = None\n        self.cost_matrix = None\n        self.association_matrix = None\n        self.threshold_matrix = None\n        self.assignment_matrix = None\n        self.assignment_list = []\n        self.tolerance = 1  # tolerance for auction algorithm\n        self.breakr = 0  # param to break from auction algorithm if auction algorithm takes too long taking too long\n        self.time_elapsed = None\n\n        self.logger = logging.getLogger(\"object_fusion\")\n\n        self.lock = Lock()  # for thread safeness\n\n        self.logger.setLevel(logging.INFO)\n        ch = logging.StreamHandler()\n        ch.setLevel(logging.INFO)\n        ch.setFormatter(log_format.Logging_Format())\n        self.logger.addHandler(ch)\n\n    def auction_algorithm(self, cost_matrix, tolerance):\n        \"\"\"\n        Method to perform auction algorithm for optimal assignment of sensor level objects and global level objects.\n        \"\"\"\n\n        starttime = rospy.get_rostime().to_sec()\n\n        shape_cost_matrix = cost_matrix.shape\n        bid_price = np.zeros((1, shape_cost_matrix[1]), dtype=np.int64)\n        assignment_matrix = -9999 * \\\n            np.ones((1, shape_cost_matrix[0]), dtype=np.int64)\n\n        assignment_complete = False\n\n        while not assignment_complete:\n\n            if -9999 in assignment_matrix:\n                not_assigned_object_index = np.where(\n                    assignment_matrix == -9999)[1]\n                sensor_object_index = not_assigned_object_index[0]\n\n                sensor_object_benifit = cost_matrix[sensor_object_index] - bid_price\n\n                maximum_value_index = np.argmax(sensor_object_benifit[0])\n                if maximum_value_index in assignment_matrix:\n                    already_assigned_object_index = np.where(\n                        assignment_matrix == maximum_value_index)[1][0]\n                    assignment_matrix[0][sensor_object_index] = maximum_value_index\n                    assignment_matrix[0][already_assigned_object_index] = -9999\n\n                    first_best = np.partition(\n                        sensor_object_benifit[0].flatten(), -2)[-1]\n                    second_best = np.partition(\n                        sensor_object_benifit[0].flatten(), -2)[-2]\n                    object_new_bidprice = (\n                        float(bid_price[0][sensor_object_index]) + (float(first_best) - float(second_best)) + float((tolerance)))\n                    try:\n                        bid_price[0][sensor_object_index] = object_new_bidprice\n                    except Exception as e:\n                        self.logger.error(e)\n                        bid_price[0][sensor_object_index] = sys.maxsize\n                else:\n                    assignment_matrix[0][sensor_object_index] = maximum_value_index\n                endtime = rospy.get_rostime().to_sec()\n                time = endtime - starttime\n                if time > 0.1:\n                    return False\n\n            else:\n                assignment_complete = True\n\n        return assignment_matrix[0]\n\n    def create_association_matrix(self, shape_association_matrix):\n        # intialize Association matrix (M*N) M - objs in sensor track, N - objs in global track\n        self.association_matrix = np.zeros(shape_association_matrix)\n\n    def create_cost_matrix_A(self, shape_cost_matrix):\n        # intialize Cost matrixA (M*N) M - objs in sensor track, N - objs in global track\n        self.cost_matrix_A = np.zeros(shape_cost_matrix)\n\n    def create_threshold_matrix(self, threshold_matrix_shape):\n        # intialize Threshold matrixA (M*N) M - objs in sensor track, N - objs in global track\n        self.threshold_matrix = np.zeros(threshold_matrix_shape)\n\n    def create_cost_matrix_B(self, cost_matrix_b_shape, threshold):\n        # intialize Cost matrixB (M*M) M - objs in sensor track\n        cost_matrix_B = np.identity(cost_matrix_b_shape) * threshold\n        self.cost_matrix_B = cost_matrix_B\n\n    def create_cost_matrix(self, sensor_updated):\n        for index_global_counter, global_track_index in enumerate(self.globaltrack.tracked_objects):\n            global_object = self.globaltrack.tracked_objects[global_track_index].current_fused_object\n            for index_sensor_object, sensor_obj_index in enumerate(sensor_updated.tracked_objects):\n                sensor_object = sensor_updated.tracked_objects[sensor_obj_index].current_object\n\n                [scenario, globalxf, globalyf, sensorxf, sensoryf,\n                    geometric] = feature_select(global_object, sensor_object)\n\n                global_association_state = np.array(\n                    [[global_object.geometric.x], [global_object.geometric.y]])\n                sensor_association_state = np.array(\n                    [[sensor_object.geometric.x], [sensor_object.geometric.y]])\n\n                global_covariance = np.array([[global_object.covariance[0],\n                                               global_object.covariance[3]],\n                                              [global_object.covariance[18],\n                                               global_object.covariance[21]]])\n                sensor_covariance = np.array([[sensor_object.covariance[0],\n                                               sensor_object.covariance[3]],\n                                              [sensor_object.covariance[18],\n                                               sensor_object.covariance[21]]])\n\n                maha_distance, threshold = statistical_distance(\n                    sensor_association_state, global_association_state, sensor_covariance, global_covariance)\n\n                if maha_distance > threshold:\n                    maha_distance = 9999\n\n                self.association_matrix[index_sensor_object,\n                                        index_global_counter] = maha_distance\n                self.threshold_matrix[index_sensor_object,\n                                      index_global_counter] = threshold\n                self.cost_matrix_B[index_sensor_object,\n                                   index_sensor_object] = threshold\n\n        sensorobjs, globalobjs = np.shape(self.association_matrix)\n        for i in range(sensorobjs):\n            for j in range(globalobjs):\n                if self.association_matrix[i, j] == 9999:\n                    self.cost_matrix_A[i, j] = 0\n                else:\n                    self.cost_matrix_A[i, j] = 2 * self.threshold_matrix[i,\n                                                                         j] - self.association_matrix[i, j]\n\n        cost_matrix = np.concatenate(\n            (self.cost_matrix_A, self.cost_matrix_B), axis=1)\n\n        return cost_matrix\n\n    def create_assignment_matrix(self, sensor_updated):\n        length_sensor_obj_list = len(sensor_updated.tracked_objects.keys())\n        length_globaltrack_obj_list = len(\n            self.globaltrack.tracked_objects.keys())\n\n        shape_association_matrix = (\n            length_sensor_obj_list, length_globaltrack_obj_list)\n        shape_cost_matrix = (length_sensor_obj_list,\n                             length_globaltrack_obj_list)\n        threshold_matrix_shape = (\n            length_sensor_obj_list, length_globaltrack_obj_list)\n        cost_matrix_b_shape = length_sensor_obj_list\n\n        self.create_association_matrix(shape_association_matrix)\n        self.create_cost_matrix_A(shape_cost_matrix)\n        self.create_threshold_matrix(threshold_matrix_shape)\n        threshold = 15\n        self.create_cost_matrix_B(cost_matrix_b_shape, threshold)\n\n        cost_matrix = self.create_cost_matrix(sensor_updated)\n\n        assignment_matrix = self.auction_algorithm(cost_matrix, self.tolerance)\n\n        return assignment_matrix\n\n    def fuse(self, sensor_index_which_needs_fusing):\n        self.lock.acquire(blocking=True)\n        sensor_updated = self.sensors[sensor_index_which_needs_fusing]\n\n        if len(sensor_updated.tracked_objects) == 0:\n            self.logger.warning(\"NO OBJECTS SEND BY SENSOR\")\n            return \"Sensor did not send Objects\"\n\n        assignment_matrix = self.create_assignment_matrix(sensor_updated)\n        if not isinstance(assignment_matrix, np.ndarray):\n            self.logger.error(\"BREAKING AUCTION ALGORITHM\")\n            self.time_penalizer()\n            self.globaltrack.timestamp = list(\n                sensor_updated.tracked_objects.values())[-1].current_timestamp\n\n            self.lock.release()\n            return False\n\n        self.logger.debug(f\"assignment_matrix{ assignment_matrix} , len global track { len(self.globaltrack.tracked_objects)}, len objlist {len(sensor_updated.tracked_objects.keys())} \")\n\n        sensor_keys = list(sensor_updated.tracked_objects.keys())\n        global_keys = list(self.globaltrack.tracked_objects.keys())\n\n        for l, assign in enumerate(assignment_matrix):\n            if assign < len(self.globaltrack.tracked_objects):\n                sensor_updated.tracked_objects[sensor_keys[l]\n                                               ].fusion_id = self.globaltrack.tracked_objects[global_keys[assign]].id\n                sensor_updated.tracked_objects[sensor_keys[l]\n                                               ].new_object = False\n            else:\n                sensor_updated.tracked_objects[sensor_keys[l]\n                                               ].new_object = True\n                self.logger.warning(\"assignment_matrix outside global size\")\n\n        t = sensor_updated.timestamp - self.globaltrack.timestamp\n        globaltrack_predicted = temporal_and_spatial_alignment.align_list(\n            self.globaltrack.tracked_objects, self.egoveh, t)\n\n        sensor_type = sensor_updated.sensor_property.sensortype\n\n        # list of global object ids\n        global_ids = [\n            globaltrack_predicted[index].id for index in globaltrack_predicted.keys()]\n\n        prev_obj_ids = []\n        for tracked_object in self.sensors[sensor_index_which_needs_fusing].tracked_objects.values():\n            if hasattr(tracked_object, \"previous_object\"):\n                prev_obj_ids.append(tracked_object.previous_object.obj_id)\n\n        for n, sensor_object in enumerate(sensor_updated.tracked_objects.values()):\n            if hasattr(sensor_object, \"fusion_id\"):\n                object_fusion_id = sensor_object.fusion_id\n            else:\n                self.logger.info(f\"new_object {sensor_object.obj_id}\")\n                sensor_object.new_object = True\n                object_fusion_id = False\n\n            sensor_trust = sensor_updated.sensor_property.trust_existance\n            sensor_property = sensor_updated.sensor_property\n            current_object_id = sensor_object.current_object.obj_id\n\n            if object_fusion_id in global_ids and current_object_id in prev_obj_ids:\n                self.fusion_if_already_in_global_and_sensor_track(globaltrack_predicted[object_fusion_id],\n                                                                  sensor_object,\n                                                                  sensor_trust,\n                                                                  sensor_property,\n                                                                  object_fusion_id)\n                self.logger.info(f\"SENSOR OBJECT ALREADY EXIST IN GLOBAL TRACK AND PREVIOUS SENSOR TRACK\")\n\n            elif object_fusion_id in global_ids and current_object_id not in prev_obj_ids:\n                self.fusion_if_already_in_global_but_not_sensor_track(globaltrack_predicted[object_fusion_id],\n                                                                      sensor_object,\n                                                                      sensor_trust,\n                                                                      sensor_property,\n                                                                      object_fusion_id)\n                self.logger.info(f\"1st update from sensor\")\n\n            elif sensor_object.new_object:\n                self.fusion_new_object(sensor_trust,\n                                       sensor_property,\n                                       sensor_object.current_object,\n                                       sensor_updated.timestamp,\n                                       sensor_index_which_needs_fusing)\n                self.logger.info(f\"FUSION IF NEW OBJECT FROM SENSOR (AS PER ASSOCIATION)\")\n\n            self.logger.debug(f\"object_fusion_id: {object_fusion_id} global_ids {global_ids} object_fusion_id {object_fusion_id}, prev_obj_ids {prev_obj_ids} obj_id {current_object_id}\")\n\n        self.time_penalizer()\n\n        print(\"#\"*110)\n\n        self.globaltrack.timestamp = sensor_object.current_timestamp\n\n        self.lock.release()\n\n        return True\n\n    def time_penalizer(self):\n        indexes_to_be_popped = []\n        for object_index in self.globaltrack.tracked_objects:\n            prop_existence = self.globaltrack.tracked_objects[\n                object_index].current_fused_object.prop_existence\n\n            t = self.globaltrack.timestamp - \\\n                self.globaltrack.tracked_objects[object_index].timestamp\n            if t > 0.7:\n                self.logger.debug(f\"penalizing object index {object_index} prob. exist = {prop_existence}\")\n                prop_existence -= 0.1\n            if prop_existence < 0:\n                indexes_to_be_popped.append(object_index)\n                self.logger.warning(f\"killing {object_index}\")\n            else:\n                self.globaltrack.tracked_objects[object_index].current_fused_object.prop_existence = prop_existence\n        for popping_index in indexes_to_be_popped:\n            self.globaltrack.tracked_objects.pop(popping_index)\n\n    def fusion_if_already_in_global_and_sensor_track(self, globaltrack_predicted,\n                                                     sensor_object,  # predict_obj\n                                                     sensor_trust,\n                                                     sensor_property,\n                                                     object_fusion_id):\n\n        time = sensor_object.current_timestamp - self.globaltrack.timestamp\n\n        prev_obj_aligned = temporal_and_spatial_alignment.align_obj(\n            sensor_object.previous_object, self.egoveh, sensor_property, time)\n\n        Sensor_obj = SensorObject(\n            sensor_object.current_object, sensor_property)\n        Sensor_obj.set_existance_probability_mass_factors()\n        Sensor_obj.set_classification_mass_factors()\n\n        Global_obj = GlobalObject(globaltrack_predicted.current_fused_object)\n        Global_obj.set_existance_probability_mass_factors(sensor_trust)\n        Global_obj.existance_mass_prediction(0.01)\n\n        fused_classification = classification_fusion.ClassificationFusion.ClassificationFusion(\n            Sensor_obj, Global_obj)\n        fused_classification.fuse()\n\n        # FUSION IF NOT 1ST UPDATE OF THIS PARTICULAR SENSOR IN GLOBAL TRACK\n        if sensor_property.sensor_id in globaltrack_predicted.fusing_participants:\n            [global_state, global_covariance] = state_and_covariance_fusion.information_matrix_fusion(globaltrack_predicted.current_fused_object,\n                                                                                                      prev_obj_aligned,\n                                                                                                      sensor_object.current_object,\n                                                                                                      sensor_property.sensor_id,\n                                                                                                      sensor_property.sensortype)\n        # FUSION IF  1ST UPDATE OF THIS PARTICULAR SENSOR IN GLOBAL TRACK\n        else:\n            [global_state, global_covariance] = state_and_covariance_fusion.cross_covariance_recursion_fusion(globaltrack_predicted.current_fused_object,\n                                                                                                              sensor_object.current_object)\n\n        globaltrack_predicted.prop_existence = existence_fusion.fuse(\n            Sensor_obj, Global_obj)\n        globaltrack_predicted.prop_persistance = globaltrack_predicted.current_fused_object.prop_persistance\n\n        globaltrack_predicted.current_fused_object.classification_mass = fused_classification.get_fused_classification_massfactors_list()\n\n        globaltrack_predicted.current_fused_object.classification = fused_classification.get_classification_probabilities()\n\n        globaltrack_predicted.current_fused_object.geometric = global_state\n        globaltrack_predicted.current_fused_object.covariance = global_covariance.flatten()\n\n        globaltrack_predicted.time = sensor_object.current_timestamp\n        globaltrack_predicted.timestamp = sensor_object.current_timestamp\n\n        # Update sensor id in global track (to check in next iteration)\n        if sensor_property.sensor_id not in globaltrack_predicted.fusing_participants:\n            globaltrack_predicted.fusing_participants.append(\n                sensor_property.sensor_id)\n\n        self.globaltrack.tracked_objects[object_fusion_id] = globaltrack_predicted\n\n    def fusion_if_already_in_global_but_not_sensor_track(self, globaltrack_predicted,\n                                                         sensor_object,  # glob_pred_obj\n                                                         sensor_trust,\n                                                         sensor_property,\n                                                         object_fusion_id):\n\n        [global_state, global_covariance] = state_and_covariance_fusion.cross_covariance_recursion_fusion(globaltrack_predicted.current_fused_object,\n                                                                                                          sensor_object.current_object)\n\n        Sensor_obj = SensorObject(\n            globaltrack_predicted.current_fused_object, sensor_property)\n        Sensor_obj.set_existance_probability_mass_factors()\n        Sensor_obj.set_classification_mass_factors()\n\n        Global_obj = GlobalObject(globaltrack_predicted.current_fused_object)\n        Global_obj.set_existance_probability_mass_factors(sensor_trust)\n        Global_obj.existance_mass_prediction(0.01)\n\n        fused_classification = classification_fusion.ClassificationFusion.ClassificationFusion(\n            Sensor_obj, Global_obj)\n        fused_classification.fuse()\n\n        globaltrack_predicted.current_fused_object.prop_existence = existence_fusion.fuse(\n            Sensor_obj, Global_obj)\n        globaltrack_predicted.current_fused_object.prop_persistance = globaltrack_predicted.current_fused_object.prop_persistance\n\n        globaltrack_predicted.current_fused_object.classification_mass = fused_classification.get_fused_classification_massfactors_list()\n\n        globaltrack_predicted.current_fused_object.classification = fused_classification.get_classification_probabilities()\n\n        globaltrack_predicted.current_fused_object.geometric = global_state\n        globaltrack_predicted.current_fused_object.covariance = global_covariance.flatten()\n\n        globaltrack_predicted.time = sensor_object.current_timestamp\n        globaltrack_predicted.timestamp = sensor_object.current_timestamp\n\n        if sensor_property.sensor_id not in globaltrack_predicted.fusing_participants:\n            globaltrack_predicted.fusing_participants.append(\n                sensor_property.sensor_id)\n\n        self.globaltrack.tracked_objects[object_fusion_id] = globaltrack_predicted\n\n    def fusion_new_object(self, sensor_trust,\n                          sensor_property,\n                          predict_obj,\n                          time,\n                          sensor_index_which_needs_fusing):\n\n        Sensor_obj = SensorObject(predict_obj, sensor_property)\n        Sensor_obj.set_existance_probability_mass_factors()\n        Sensor_obj.set_classification_mass_factors()\n\n        self.globaltrack.create_new_global_object(predict_obj, [\n                                                  sensor_index_which_needs_fusing], time, classification_mass=Sensor_obj.list_classification_mass_factor)\n"
					},
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAFIQAAAAAAAAUhAAAAAAAAAAAAAAAA8L8"
				],
				[
					8,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAK8aAAAAAAAArxoAAAAAAAABAAAACq8aAAAAAAAArxoAAAAAAABJAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvGgAAAAAAAK8aAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"reindent",
					null,
					"AQAAANIaAAAAAAAA5hoAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSGgAAAAAAANIaAAAAAAAAAAAAAAAA8L8"
				],
				[
					24,
					1,
					"paste",
					null,
					"AQAAAOYaAAAAAAAAARsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADmGgAAAAAAAOYaAAAAAAAAAAAAAAAA8L8"
				],
				[
					25,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAAEbAAAAAAAAAhsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAABGwAAAAAAAAEbAAAAAAAAAAAAAAAA8L8"
				],
				[
					26,
					1,
					"left_delete",
					null,
					"AQAAAAEbAAAAAAAAARsAAAAAAAABAAAALQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACGwAAAAAAAAIbAAAAAAAAAAAAAAAA8L8"
				],
				[
					28,
					1,
					"insert",
					{
						"characters": "-"
					},
					"AQAAAP8aAAAAAAAAABsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD/GgAAAAAAAP8aAAAAAAAAAAAAAAAA8L8"
				],
				[
					31,
					2,
					"right_delete",
					null,
					"AgAAALIaAAAAAAAAshoAAAAAAAABAAAALbIaAAAAAAAAshoAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyGgAAAAAAALIaAAAAAAAAAAAAAAAA8L8"
				],
				[
					33,
					1,
					"cut",
					null,
					"AQAAALIaAAAAAAAAshoAAAAAAAAdAAAAc2VsZi5hc3NvY2lhdGlvbl9tYXRyaXhbaSwgal0",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACyGgAAAAAAAM8aAAAAAAAA////////738"
				],
				[
					35,
					1,
					"paste",
					null,
					"AQAAAOMaAAAAAAAAABsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADjGgAAAAAAAOMaAAAAAAAAAAAAAAAQkUA"
				],
				[
					41,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAACYbAAAAAAAAJhsAAAAAAAABAAAACiYbAAAAAAAAJhsAAAAAAAAMAAAAICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAmGwAAAAAAACYbAAAAAAAAAAAAAAAA8L8"
				],
				[
					46,
					1,
					"insert",
					{
						"characters": "        "
					},
					"CAAAAFcbAAAAAAAAWBsAAAAAAAAAAAAAWBsAAAAAAABZGwAAAAAAAAAAAABZGwAAAAAAAFobAAAAAAAAAAAAAFobAAAAAAAAWxsAAAAAAAAAAAAAWxsAAAAAAABcGwAAAAAAAAAAAABcGwAAAAAAAF0bAAAAAAAAAAAAAF0bAAAAAAAAXhsAAAAAAAAAAAAAXhsAAAAAAABfGwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABXGwAAAAAAAFcbAAAAAAAAAAAAAAAA8L8"
				],
				[
					47,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAF8bAAAAAAAAYBsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABfGwAAAAAAAF8bAAAAAAAAAAAAAAAA8L8"
				],
				[
					52,
					2,
					"left_delete",
					null,
					"AgAAAF8bAAAAAAAAXxsAAAAAAAABAAAAIF4bAAAAAAAAXhsAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgGwAAAAAAAGAbAAAAAAAA////////738"
				],
				[
					76,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAHVHAAAAAAAAdUcAAAAAAAABAAAACnVHAAAAAAAAdUcAAAAAAAAMAAAAICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB1RwAAAAAAAHVHAAAAAAAAAAAAAAAA8L8"
				],
				[
					214,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAKYgAAAAAAAApyAAAAAAAAAAAAAApyAAAAAAAACzIAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmIAAAAAAAAKYgAAAAAAAAAAAAAAAA8L8"
				],
				[
					215,
					1,
					"paste",
					null,
					"AQAAALMgAAAAAAAAxiAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACzIAAAAAAAALMgAAAAAAAAAAAAAAAA8L8"
				],
				[
					223,
					1,
					"right_delete",
					null,
					"AQAAAIokAAAAAAAAiiQAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKJAAAAAAAAIokAAAAAAAAAAAAAAAA8L8"
				],
				[
					224,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAIokAAAAAAAAiiQAAAAAAAAvAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACKJAAAAAAAAIokAAAAAAAAAAAAAAAA8L8"
				],
				[
					228,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAA4lAAAAAAAADiUAAAAAAAABAAAACg4lAAAAAAAADiUAAAAAAAAvAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAOJQAAAAAAAA4lAAAAAAAAAAAAAACwikA"
				],
				[
					233,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAFgdAAAAAAAAWB0AAAAAAAABAAAAClgdAAAAAAAAWB0AAAAAAAAMAAAAICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYHQAAAAAAAFgdAAAAAAAAAAAAAAAA8L8"
				],
				[
					236,
					1,
					"right_delete",
					null,
					"AQAAAIUcAAAAAAAAhRwAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFHAAAAAAAAIUcAAAAAAAAAAAAAAAA8L8"
				],
				[
					237,
					1,
					"delete_word",
					{
						"forward": true
					},
					"AQAAAIUcAAAAAAAAhRwAAAAAAAAMAAAAICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACFHAAAAAAAAIUcAAAAAAAAAAAAAAAA8L8"
				],
				[
					240,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAAY5AAAAAAAABjkAAAAAAAABAAAACgY5AAAAAAAABjkAAAAAAAAMAAAAICAgICAgICAgICAg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAGOQAAAAAAAAY5AAAAAAAAAAAAAAAA8L8"
				],
				[
					259,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAO8hAAAAAAAA7yEAAAAAAAABAAAACu8hAAAAAAAA7yEAAAAAAAAQAAAAICAgICAgICAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADvIQAAAAAAAO8hAAAAAAAAAAAAAAAA8L8"
				],
				[
					267,
					1,
					"cut",
					null,
					"AQAAAC4iAAAAAAAALiIAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuIgAAAAAAAC4iAAAAAAAAAAAAAAAAZUA"
				],
				[
					271,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAM0hAAAAAAAAziEAAAAAAAAAAAAAziEAAAAAAADaIQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNIQAAAAAAAM0hAAAAAAAAAAAAAAAAZUA"
				],
				[
					273,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAEciAAAAAAAASCIAAAAAAAAAAAAASCIAAAAAAABUIgAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABHIgAAAAAAAEciAAAAAAAAAAAAAAAAZUA"
				],
				[
					296,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAGAlAAAAAAAAYCUAAAAAAAABAAAACmAlAAAAAAAAYCUAAAAAAAAvAAAAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABgJQAAAAAAAGAlAAAAAAAAAAAAAAAA8L8"
				],
				[
					318,
					1,
					"insert",
					{
						"characters": "\nprint"
					},
					"CAAAAIgLAAAAAAAAiQsAAAAAAAAAAAAAiQsAAAAAAACdCwAAAAAAAAAAAACdCwAAAAAAAKELAAAAAAAAAAAAAKELAAAAAAAAogsAAAAAAAAAAAAAogsAAAAAAACjCwAAAAAAAAAAAACjCwAAAAAAAKQLAAAAAAAAAAAAAKQLAAAAAAAApQsAAAAAAAAAAAAApQsAAAAAAACmCwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACICwAAAAAAAIgLAAAAAAAA////////738"
				],
				[
					319,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAKYLAAAAAAAAqAsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACmCwAAAAAAAKYLAAAAAAAAAAAAAAAA8L8"
				],
				[
					320,
					1,
					"insert_snippet",
					{
						"contents": "\"$0\""
					},
					"AQAAAKcLAAAAAAAAqQsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACnCwAAAAAAAKcLAAAAAAAAAAAAAAAA8L8"
				],
				[
					321,
					1,
					"insert",
					{
						"characters": "error"
					},
					"BQAAAKgLAAAAAAAAqQsAAAAAAAAAAAAAqQsAAAAAAACqCwAAAAAAAAAAAACqCwAAAAAAAKsLAAAAAAAAAAAAAKsLAAAAAAAArAsAAAAAAAAAAAAArAsAAAAAAACtCwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACoCwAAAAAAAKgLAAAAAAAAAAAAAAAA8L8"
				],
				[
					323,
					1,
					"insert",
					{
						"characters": ","
					},
					"AQAAAK4LAAAAAAAArwsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACuCwAAAAAAAK4LAAAAAAAAAAAAAAAA8L8"
				],
				[
					324,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAAK8LAAAAAAAAsAsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCwAAAAAAAK8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					325,
					1,
					"left_delete",
					null,
					"AQAAAK8LAAAAAAAArwsAAAAAAAABAAAAIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwCwAAAAAAALALAAAAAAAAAAAAAAAA8L8"
				],
				[
					326,
					1,
					"insert",
					{
						"characters": "e"
					},
					"AQAAAK8LAAAAAAAAsAsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvCwAAAAAAAK8LAAAAAAAAAAAAAAAA8L8"
				],
				[
					335,
					1,
					"insert",
					{
						"characters": "criti"
					},
					"BgAAANYLAAAAAAAA1wsAAAAAAAAAAAAA1wsAAAAAAADXCwAAAAAAAAUAAABlcnJvctcLAAAAAAAA2AsAAAAAAAAAAAAA2AsAAAAAAADZCwAAAAAAAAAAAADZCwAAAAAAANoLAAAAAAAAAAAAANoLAAAAAAAA2wsAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADWCwAAAAAAANsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					337,
					1,
					"insert",
					{
						"characters": "cal"
					},
					"AwAAANsLAAAAAAAA3AsAAAAAAAAAAAAA3AsAAAAAAADdCwAAAAAAAAAAAADdCwAAAAAAAN4LAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADbCwAAAAAAANsLAAAAAAAAAAAAAAAA8L8"
				],
				[
					346,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAPUMAAAAAAAA9gwAAAAAAAAAAAAA9gwAAAAAAAAGDQAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1DAAAAAAAAPUMAAAAAAAAAAAAAAAA8L8"
				],
				[
					352,
					8,
					"left_delete",
					null,
					"CQAAAKELAAAAAAAAoQsAAAAAAAAQAAAAcHJpbnQoImVycm9yIixlKeYMAAAAAAAA5gwAAAAAAAAQAAAAICAgICAgICAgICAgICAgIJ0LAAAAAAAAnQsAAAAAAAAEAAAAICAgIJkLAAAAAAAAmQsAAAAAAAAEAAAAICAgIJULAAAAAAAAlQsAAAAAAAAEAAAAICAgIJELAAAAAAAAkQsAAAAAAAAEAAAAICAgII0LAAAAAAAAjQsAAAAAAAAEAAAAICAgIIkLAAAAAAAAiQsAAAAAAAAEAAAAICAgIIgLAAAAAAAAiAsAAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxCwAAAAAAAKELAAAAAAAAAAAAAAAAdUA"
				],
				[
					361,
					1,
					"reindent",
					null,
					"AQAAAM0MAAAAAAAA3QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNDAAAAAAAAM0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					369,
					1,
					"paste",
					null,
					"AQAAAN0MAAAAAAAA6QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADdDAAAAAAAAN0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					370,
					1,
					"insert",
					{
						"characters": "info"
					},
					"BAAAAOkMAAAAAAAA6gwAAAAAAAAAAAAA6gwAAAAAAADrDAAAAAAAAAAAAADrDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA7QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpDAAAAAAAAOkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					371,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAO0MAAAAAAAA7wwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtDAAAAAAAAO0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					372,
					1,
					"insert",
					{
						"characters": "time"
					},
					"BAAAAO4MAAAAAAAA7wwAAAAAAAAAAAAA7wwAAAAAAADwDAAAAAAAAAAAAADwDAAAAAAAAPEMAAAAAAAAAAAAAPEMAAAAAAAA8gwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDAAAAAAAAO4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					374,
					1,
					"insert",
					{
						"characters": "f\""
					},
					"AgAAAO4MAAAAAAAA7wwAAAAAAAAAAAAA7wwAAAAAAADwDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADuDAAAAAAAAO4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					375,
					1,
					"insert",
					{
						"characters": "time"
					},
					"BAAAAPAMAAAAAAAA8QwAAAAAAAAAAAAA8QwAAAAAAADyDAAAAAAAAAAAAADyDAAAAAAAAPMMAAAAAAAAAAAAAPMMAAAAAAAA9AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDAAAAAAAAPAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					376,
					1,
					"insert",
					{
						"characters": " {"
					},
					"AgAAAPQMAAAAAAAA9QwAAAAAAAAAAAAA9QwAAAAAAAD2DAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD0DAAAAAAAAPQMAAAAAAAAAAAAAAAA8L8"
				],
				[
					378,
					1,
					"insert",
					{
						"characters": "}}"
					},
					"AgAAAPoMAAAAAAAA+wwAAAAAAAAAAAAA+wwAAAAAAAD8DAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD6DAAAAAAAAPoMAAAAAAAAAAAAAAAA8L8"
				],
				[
					379,
					1,
					"left_delete",
					null,
					"AQAAAPsMAAAAAAAA+wwAAAAAAAABAAAAfQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD8DAAAAAAAAPwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					380,
					1,
					"insert",
					{
						"characters": "\""
					},
					"AQAAAPsMAAAAAAAA/AwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD7DAAAAAAAAPsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					383,
					1,
					"insert",
					{
						"characters": "auction"
					},
					"BwAAAPAMAAAAAAAA8QwAAAAAAAAAAAAA8QwAAAAAAADyDAAAAAAAAAAAAADyDAAAAAAAAPMMAAAAAAAAAAAAAPMMAAAAAAAA9AwAAAAAAAAAAAAA9AwAAAAAAAD1DAAAAAAAAAAAAAD1DAAAAAAAAPYMAAAAAAAAAAAAAPYMAAAAAAAA9wwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADwDAAAAAAAAPAMAAAAAAAAAAAAAAAA8L8"
				],
				[
					384,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAPcMAAAAAAAA+AwAAAAAAAAAAAAA+AwAAAAAAAD5DAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD3DAAAAAAAAPcMAAAAAAAAAAAAAAAA8L8"
				],
				[
					385,
					1,
					"left_delete",
					null,
					"AQAAAPgMAAAAAAAA+AwAAAAAAAABAAAAdA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD5DAAAAAAAAPkMAAAAAAAAAAAAAAAA8L8"
				],
				[
					390,
					1,
					"insert",
					{
						"characters": "debu"
					},
					"BQAAAOkMAAAAAAAA6gwAAAAAAAAAAAAA6gwAAAAAAADqDAAAAAAAAAQAAABpbmZv6gwAAAAAAADrDAAAAAAAAAAAAADrDAAAAAAAAOwMAAAAAAAAAAAAAOwMAAAAAAAA7QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpDAAAAAAAAO0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					391,
					1,
					"insert_completion",
					{
						"completion": "debug",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "debug"
					},
					"AgAAAOkMAAAAAAAA6QwAAAAAAAAEAAAAZGVidekMAAAAAAAA7gwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADtDAAAAAAAAO0MAAAAAAAAAAAAAAAA8L8"
				],
				[
					397,
					1,
					"left_delete",
					null,
					"AgAAAP8DAAAAAAAA/wMAAAAAAAAEAAAASU5GT7gDAAAAAAAAuAMAAAAAAAAEAAAASU5GTw",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAAC4AwAAAAAAALwDAAAAAAAAAAAAAAAA8L//AwAAAAAAAAMEAAAAAAAAAAAAAAAA8L8"
				],
				[
					398,
					1,
					"insert",
					{
						"characters": "DEBUG"
					},
					"CgAAAPsDAAAAAAAA/AMAAAAAAAAAAAAAuAMAAAAAAAC5AwAAAAAAAAAAAAD9AwAAAAAAAP4DAAAAAAAAAAAAALkDAAAAAAAAugMAAAAAAAAAAAAA/wMAAAAAAAAABAAAAAAAAAAAAAC6AwAAAAAAALsDAAAAAAAAAAAAAAEEAAAAAAAAAgQAAAAAAAAAAAAAuwMAAAAAAAC8AwAAAAAAAAAAAAADBAAAAAAAAAQEAAAAAAAAAAAAALwDAAAAAAAAvQMAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAAC4AwAAAAAAALgDAAAAAAAAAAAAAAAA8L/7AwAAAAAAAPsDAAAAAAAAAAAAAAAA8L8"
				],
				[
					411,
					1,
					"insert",
					{
						"characters": "abs("
					},
					"BAAAALsMAAAAAAAAvAwAAAAAAAAAAAAAvAwAAAAAAAC9DAAAAAAAAAAAAAC9DAAAAAAAAL4MAAAAAAAAAAAAAL4MAAAAAAAAvwwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC7DAAAAAAAALsMAAAAAAAAAAAAAAAA8L8"
				],
				[
					413,
					1,
					"insert",
					{
						"characters": ")"
					},
					"AQAAANIMAAAAAAAA0wwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADSDAAAAAAAANIMAAAAAAAA////////738"
				],
				[
					430,
					1,
					"insert",
					{
						"characters": "INFO"
					},
					"CgAAAAAEAAAAAAAAAQQAAAAAAAAAAAAAAQQAAAAAAAABBAAAAAAAAAUAAABERUJVR7gDAAAAAAAAuQMAAAAAAAAAAAAAuQMAAAAAAAC5AwAAAAAAAAUAAABERUJVR/0DAAAAAAAA/gMAAAAAAAAAAAAAuQMAAAAAAAC6AwAAAAAAAAAAAAD/AwAAAAAAAAAEAAAAAAAAAAAAALoDAAAAAAAAuwMAAAAAAAAAAAAAAQQAAAAAAAACBAAAAAAAAAAAAAC7AwAAAAAAALwDAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAIAAAC4AwAAAAAAAL0DAAAAAAAAAAAAAAAA8L8ABAAAAAAAAAUEAAAAAAAAAAAAAAAA8L8"
				],
				[
					440,
					1,
					"insert",
					{
						"characters": " or"
					},
					"AwAAACkNAAAAAAAAKg0AAAAAAAAAAAAAKg0AAAAAAAArDQAAAAAAAAAAAAArDQAAAAAAACwNAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApDQAAAAAAACkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					441,
					1,
					"insert",
					{
						"characters": " time<"
					},
					"BgAAACwNAAAAAAAALQ0AAAAAAAAAAAAALQ0AAAAAAAAuDQAAAAAAAAAAAAAuDQAAAAAAAC8NAAAAAAAAAAAAAC8NAAAAAAAAMA0AAAAAAAAAAAAAMA0AAAAAAAAxDQAAAAAAAAAAAAAxDQAAAAAAADINAAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAsDQAAAAAAACwNAAAAAAAAAAAAAAAA8L8"
				],
				[
					442,
					1,
					"insert",
					{
						"characters": "0"
					},
					"AQAAADINAAAAAAAAMw0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyDQAAAAAAADINAAAAAAAAAAAAAAAA8L8"
				],
				[
					444,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADINAAAAAAAAMw0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAyDQAAAAAAADINAAAAAAAAAAAAAAAA8L8"
				],
				[
					446,
					1,
					"insert",
					{
						"characters": " "
					},
					"AQAAADENAAAAAAAAMg0AAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAxDQAAAAAAADENAAAAAAAAAAAAAAAA8L8"
				],
				[
					452,
					2,
					"right_delete",
					null,
					"AgAAALkMAAAAAAAAuQwAAAAAAAADAAAAYWJzuQwAAAAAAAC5DAAAAAAAAAEAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC5DAAAAAAAALwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					454,
					1,
					"left_delete",
					null,
					"AQAAAMwMAAAAAAAAzAwAAAAAAAABAAAAKQ",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADNDAAAAAAAAM0MAAAAAAAA////////738"
				],
				[
					459,
					1,
					"insert",
					{
						"characters": "critical"
					},
					"CQAAAOkMAAAAAAAA6gwAAAAAAAAAAAAA6gwAAAAAAADqDAAAAAAAAAUAAABkZWJ1Z+oMAAAAAAAA6wwAAAAAAAAAAAAA6wwAAAAAAADsDAAAAAAAAAAAAADsDAAAAAAAAO0MAAAAAAAAAAAAAO0MAAAAAAAA7gwAAAAAAAAAAAAA7gwAAAAAAADvDAAAAAAAAAAAAADvDAAAAAAAAPAMAAAAAAAAAAAAAPAMAAAAAAAA8QwAAAAAAAAAAAAA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADpDAAAAAAAAO4MAAAAAAAAAAAAAAAA8L8"
				],
				[
					468,
					6,
					"left_delete",
					null,
					"BgAAAN0MAAAAAAAA3QwAAAAAAAAsAAAAc2VsZi5sb2dnZXIuY3JpdGljYWwoZiJhdWN0aW9uIHRpbWUge3RpbWV9IinZDAAAAAAAANkMAAAAAAAABAAAACAgICDVDAAAAAAAANUMAAAAAAAABAAAACAgICDRDAAAAAAAANEMAAAAAAAABAAAACAgICDNDAAAAAAAAM0MAAAAAAAABAAAACAgICDMDAAAAAAAAMwMAAAAAAAAAQAAAAo",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJDQAAAAAAAN0MAAAAAAAAAAAAAAAAbEA"
				],
				[
					469,
					1,
					"revert",
					null,
					"",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADMDAAAAAAAAMwMAAAAAAAAAAAAAAAA8L8"
				],
				[
					476,
					1,
					"left_delete",
					null,
					"AQAAABgNAAAAAAAAGA0AAAAAAAABAAAACg",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAZDQAAAAAAABkNAAAAAAAAAAAAAAAA8L8"
				],
				[
					515,
					2,
					"delete_word",
					{
						"forward": true
					},
					"AgAAAKVDAAAAAAAApUMAAAAAAAABAAAACqVDAAAAAAAApUMAAAAAAAAQAAAAICAgICAgICAgICAgICAgIA",
					"BQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAClQwAAAAAAAKVDAAAAAAAAAAAAAAAA8L8"
				],
				[
					5,
					1,
					"paste",
					null,
					"AQAAAHkAAAAAAAAAjgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAB5AAAAAAAAAHkAAAAAAAAAAAAAAAAA8L8"
				],
				[
					10,
					1,
					"insert",
					{
						"characters": "\ninit"
					},
					"BgAAAPUfAAAAAAAA9h8AAAAAAAAAAAAA9h8AAAAAAAD+HwAAAAAAAAAAAAD+HwAAAAAAAP8fAAAAAAAAAAAAAP8fAAAAAAAAACAAAAAAAAAAAAAAACAAAAAAAAABIAAAAAAAAAAAAAABIAAAAAAAAAIgAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAD1HwAAAAAAAPUfAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": " ="
					},
					"AgAAAAIgAAAAAAAAAyAAAAAAAAAAAAAAAyAAAAAAAAAEIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAACIAAAAAAAAAIgAAAAAAAAAAAAAAAA8L8"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " time"
					},
					"BQAAAAQgAAAAAAAABSAAAAAAAAAAAAAABSAAAAAAAAAGIAAAAAAAAAAAAAAGIAAAAAAAAAcgAAAAAAAAAAAAAAcgAAAAAAAACCAAAAAAAAAAAAAACCAAAAAAAAAJIAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAEIAAAAAAAAAQgAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"insert_snippet",
					{
						"contents": "($0)"
					},
					"AQAAAAkgAAAAAAAACyAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAJIAAAAAAAAAkgAAAAAAAAAAAAAAAA8L8"
				],
				[
					50,
					4,
					"left_delete",
					null,
					"BAAAAP4fAAAAAAAA/h8AAAAAAAANAAAAaW5pdCA9IHRpbWUoKfofAAAAAAAA+h8AAAAAAAAEAAAAICAgIPYfAAAAAAAA9h8AAAAAAAAEAAAAICAgIPUfAAAAAAAA9R8AAAAAAAABAAAACg",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAALIAAAAAAAAP4fAAAAAAAAAAAAAAAAXEA"
				],
				[
					23,
					1,
					"insert",
					{
						"characters": "5"
					},
					"AgAAAFs0AAAAAAAAXDQAAAAAAAAAAAAAXDQAAAAAAABcNAAAAAAAAAEAAAA3",
					"AQAAAAAAAAABAAAAWzQAAAAAAABcNAAAAAAAAAAAAAAAAPC/"
				]
			]
		},
		{
			"file": "src/fusion.py",
			"settings":
			{
				"buffer_size": 919,
				"line_ending": "Unix"
			},
			"undo_stack":
			[
			]
		},
		{
			"file": "src/object_fusion_pypkg/Callback_Handler.py",
			"settings":
			{
				"buffer_size": 4667,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					13,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAFgQAAAAAAAAWRAAAAAAAAAAAAAAWRAAAAAAAABlEAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAABYEAAAAAAAAFgQAAAAAAAAAAAAAAAA8L8"
				],
				[
					16,
					1,
					"insert",
					{
						"characters": "\n\n"
					},
					"AwAAACkBAAAAAAAAKgEAAAAAAAAAAAAAWhAAAAAAAABaEAAAAAAAAAwAAAAgICAgICAgICAgICAqAQAAAAAAACsBAAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAApAQAAAAAAACkBAAAAAAAAAAAAAAAA8L8"
				],
				[
					18,
					1,
					"insert",
					{
						"characters": "from"
					},
					"BAAAACoBAAAAAAAAKwEAAAAAAAAAAAAAKwEAAAAAAAAsAQAAAAAAAAAAAAAsAQAAAAAAAC0BAAAAAAAAAAAAAC0BAAAAAAAALgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAqAQAAAAAAACoBAAAAAAAAAAAAAAAAAAA"
				],
				[
					19,
					1,
					"insert",
					{
						"characters": " time"
					},
					"BQAAAC4BAAAAAAAALwEAAAAAAAAAAAAALwEAAAAAAAAwAQAAAAAAAAAAAAAwAQAAAAAAADEBAAAAAAAAAAAAADEBAAAAAAAAMgEAAAAAAAAAAAAAMgEAAAAAAAAzAQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAuAQAAAAAAAC4BAAAAAAAAAAAAAAAA8L8"
				],
				[
					20,
					1,
					"insert",
					{
						"characters": " import"
					},
					"BwAAADMBAAAAAAAANAEAAAAAAAAAAAAANAEAAAAAAAA1AQAAAAAAAAAAAAA1AQAAAAAAADYBAAAAAAAAAAAAADYBAAAAAAAANwEAAAAAAAAAAAAANwEAAAAAAAA4AQAAAAAAAAAAAAA4AQAAAAAAADkBAAAAAAAAAAAAADkBAAAAAAAAOgEAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAzAQAAAAAAADMBAAAAAAAAAAAAAAAA8L8"
				],
				[
					21,
					1,
					"insert",
					{
						"characters": " time"
					},
					"BQAAADoBAAAAAAAAOwEAAAAAAAAAAAAAOwEAAAAAAAA8AQAAAAAAAAAAAAA8AQAAAAAAAD0BAAAAAAAAAAAAAD0BAAAAAAAAPgEAAAAAAAAAAAAAPgEAAAAAAAA/AQAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA6AQAAAAAAADoBAAAAAAAAAAAAAAAA8L8"
				],
				[
					23,
					1,
					"cut",
					null,
					"AQAAACoBAAAAAAAAKgEAAAAAAAAVAAAAZnJvbSB0aW1lIGltcG9ydCB0aW1l",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAA/AQAAAAAAACoBAAAAAAAAAAAAAAAAAAA"
				]
			]
		},
		{
			"file": "src/inteface_adma_radar_fusion.py",
			"settings":
			{
				"buffer_size": 6385,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAK0GAAAAAAAArwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtBgAAAAAAAK0GAAAAAAAAAAAAAAAAXEA"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "\n"
					},
					"AgAAAK0GAAAAAAAArgYAAAAAAAAAAAAArgYAAAAAAAC2BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtBgAAAAAAAK0GAAAAAAAAAAAAAAAA8L8"
				],
				[
					11,
					1,
					"insert",
					{
						"characters": "if"
					},
					"AgAAAK0GAAAAAAAArgYAAAAAAAAAAAAArgYAAAAAAACvBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACtBgAAAAAAAK0GAAAAAAAAAAAAAAAAXEA"
				],
				[
					12,
					1,
					"insert",
					{
						"characters": " t"
					},
					"AgAAAK8GAAAAAAAAsAYAAAAAAAAAAAAAsAYAAAAAAACxBgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACvBgAAAAAAAK8GAAAAAAAAAAAAAAAA8L8"
				],
				[
					13,
					1,
					"left_delete",
					null,
					"AQAAALAGAAAAAAAAsAYAAAAAAAABAAAAdA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACxBgAAAAAAALEGAAAAAAAAAAAAAAAA8L8"
				],
				[
					14,
					1,
					"insert",
					{
						"characters": "True:"
					},
					"BQAAALAGAAAAAAAAsQYAAAAAAAAAAAAAsQYAAAAAAACyBgAAAAAAAAAAAACyBgAAAAAAALMGAAAAAAAAAAAAALMGAAAAAAAAtAYAAAAAAAAAAAAAtAYAAAAAAAC1BgAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAACwBgAAAAAAALAGAAAAAAAAAAAAAAAA8L8"
				],
				[
					15,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAK0GAAAAAAAArwYAAAAAAAAAAAAA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAC1BgAAAAAAALUGAAAAAAAAAAAAAAAA8L8"
				],
				[
					17,
					1,
					"toggle_comment",
					{
						"block": false
					},
					"AQAAAMAGAAAAAAAAwAYAAAAAAAACAAAAIyA",
					"AgAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAADKBgAAAAAAAMoGAAAAAAAAAAAAAACAb0A"
				]
			]
		},
		{
			"file": "/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion/src/input_fusion.py",
			"settings":
			{
				"buffer_size": 2220,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			},
			"undo_stack":
			[
				[
					5,
					1,
					"insert",
					{
						"characters": "input_"
					},
					"BwAAAHAHAAAAAAAAcQcAAAAAAAAAAAAAcQcAAAAAAABxBwAAAAAAAAcAAABzZW5zb3IycQcAAAAAAAByBwAAAAAAAAAAAAByBwAAAAAAAHMHAAAAAAAAAAAAAHMHAAAAAAAAdAcAAAAAAAAAAAAAdAcAAAAAAAB1BwAAAAAAAAAAAAB1BwAAAAAAAHYHAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAcAcAAAAAAAB3BwAAAAAAAAAAAAAAAPC/"
				],
				[
					6,
					1,
					"insert_completion",
					{
						"completion": "input_vis",
						"format": "text",
						"keep_prefix": false,
						"must_insert": false,
						"trigger": "input_vis"
					},
					"AgAAAHAHAAAAAAAAcAcAAAAAAAAGAAAAaW5wdXRfcAcAAAAAAAB5BwAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdgcAAAAAAAB2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					8,
					1,
					"left_delete",
					null,
					"AQAAAHUHAAAAAAAAdQcAAAAAAAABAAAAXw",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdgcAAAAAAAB2BwAAAAAAAAAAAAAAAPC/"
				],
				[
					9,
					1,
					"insert",
					{
						"characters": "/"
					},
					"AQAAAHUHAAAAAAAAdgcAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAdQcAAAAAAAB1BwAAAAAAAAAAAAAAAPC/"
				],
				[
					16,
					1,
					"paste",
					null,
					"AgAAAK8HAAAAAAAAywcAAAAAAAAAAAAAywcAAAAAAADLBwAAAAAAABoAAAAvc2Vuc29yMi9vYmpfbGlzdF9lZ29mcmFtZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAArwcAAAAAAADJBwAAAAAAAAAAAAAAAPC/"
				],
				[
					19,
					1,
					"paste",
					null,
					"AgAAABgIAAAAAAAANAgAAAAAAAAAAAAANAgAAAAAAAA0CAAAAAAAABoAAAAvc2Vuc29yNS9vYmpfbGlzdF9lZ29mcmFtZQ",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAAMggAAAAAAAAYCAAAAAAAAAAAAAAAAPC/"
				],
				[
					24,
					1,
					"insert",
					{
						"characters": "radar"
					},
					"BgAAAC4IAAAAAAAALwgAAAAAAAAAAAAALwgAAAAAAAAvCAAAAAAAAAYAAABjYW1lcmEvCAAAAAAAADAIAAAAAAAAAAAAADAIAAAAAAAAMQgAAAAAAAAAAAAAMQgAAAAAAAAyCAAAAAAAAAAAAAAyCAAAAAAAADMIAAAAAAAAAAAAAA",
					"BAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/AAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8L8AAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADwvwAAAAABAAAALggAAAAAAAA0CAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"package control: in",
				"Package Control: Install Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/__pycache__"
	],
	"file_history":
	[
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/classification_fusion/ClassificationFusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/Callback_Handler.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/log_format/Logging_Format.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/inteface_adma_radar_fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/ros_bag_launch/launch/rosbag_smoke.launch",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion/src/inteface_adma_radar_fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion/src/Association.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/state_and_covariance_fusion/information_matrix_fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/state_and_covariance_fusion/cross_covariance_fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/object_association/feature_select.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/classification_fusion/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/object_association/statistical_distance.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/object_association/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ego_state/Ego.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/SensorObject.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/GlobalObject.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/track/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/track/Global_Track.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/track/Sensor_Track.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/track/Tracked_Object.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/track/Track.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/object_association/calculate_features.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/state_and_covariance_fusion/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/temporal_and_spatial_alignment/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ros2python/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/Fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/log_format/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion_msgs/CMakeLists.txt",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion_msgs/msg/Object_List.msg",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/existence_fusion/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ego_state/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/temporal_and_spatial_alignment/temporal_alignment_detected_object.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/temporal_and_spatial_alignment/temporal_alignment_object_list.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion_msgs/msg/Geometric.msg",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/existence_fusion/fuse.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/existence_fusion/Existence_Fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/object_association/get_statistical_distance.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ego/__init__.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ego/Ego.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ego/Acc.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/ego/Vel.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/state_and_covariance_fusion/temporal_alignment_detected_object.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/state_and_covariance_fusion/temporal_alignment_object_list.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/fusion_function.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/Tracked_Object.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/object_fusion/src/object_fusion_pypkg/Track.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/ExistanceFusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/SensorObject.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/object_fusion/Association.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/object_fusion/Callback_Handler.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/GlobalObject.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/object_fusion/fusion.py",
		"/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion_2/src/.gitignore",
		"/home/poledna/06_fusion/03_aeberhard_ws/src/aeb/script/ClassAeb.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/tracking_bboxes/src/draw_tracks.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/Camera.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/fusion_function.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Global_Track.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/ClassExistance_Objects.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/inteface_adma_radar_fusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/tracking_bboxes/src/tracking_to_object_list.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/smoke_vis.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/detectionInfo.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/Association.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/fusion_function.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Fusion2.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/tracking_bboxes/src/detectionInfo.py",
		"/home/poledna/tf_ros_check_parent.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/.gitignore",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/CustomFormatter.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/ros2python/Objects.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Tracked_Object.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Association.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/SensorObject.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Sensor_Track.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/fusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/GlobalObject.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/ros2python/Sensor_Property.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/ros2python/Sensor_objects.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Fusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Track.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Ego.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Ego_Postion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Features.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Pos.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Vel.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/Acc.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/ExistanceFusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion_2/src/ClassificationFusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/visualization_fusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/sensor_model/scripts/ClassKF.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/tracking_bboxes/src/tracking_bbox.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/input_fusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/ros_bag_launch/launch/rosbag_smoke.launch",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/smoke_kernel.py",
		"/media/poledna/Poledna/05_fusion/00_Neural_Networks_Architectures/02_SMOKE/01_SMOKE_real_time/smoke_kitti_vis.py",
		"/media/poledna/Poledna/05_fusion/02_smoke_ws/src/ars_40X/src/target_vis.py",
		"/media/poledna/Poledna/05_fusion/02_smoke_ws/src/smoke/src/smoke_kernel.py",
		"/media/poledna/Poledna/00_rosbags_Yuri/99_Post_Processing/src/get_gps_time_data.py",
		"/media/poledna/Poledna/00_rosbags_Yuri/99_Post_Processing/src/add_camera_info.py",
		"/media/poledna/Poledna/02_data_acq_ws/src/sp80/src/sp80_python_node.py",
		"/media/poledna/Poledna/05_fusion/00_Neural_Networks_Architectures/02_SMOKE/smoke_ros_ws/src/smoke/src/detectionInfo.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/ClassFusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/fusion/src/fusion.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/aeb/launch/ClassBoss2.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/SMOKE_KITTI_RVIZ.mp4",
		"/media/poledna/Poledna/05_fusion/00_Neural_Networks_Architectures/02_SMOKE/smoke_ros_ws/src/smoke/src/smoke_vis.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/object_list/msg/ObjectList.msg",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/CMakeLists.txt",
		"/opt/ros/melodic/lib/python2.7/dist-packages/tf2_ros/buffer_interface.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/tracking_bboxes/src/smoke_kitti_vis.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/msg/Kitti_Detection_Format.msg",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/smoke_ros.py",
		"/tmp/joke.py",
		"/tmp/gello.py",
		"/tmp/data_sensor_2",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/tracking_bboxes/src/read_radar.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/sensor_model/scripts/sensor2Ego.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/smoke_kitti_vis.py",
		"/media/poledna/Poledna/05_fusion/02_smoke_ws/src/smoke/src/smoke_kitti_vis.py",
		"/media/poledna/Poledna/05_fusion/00_Neural_Networks_Architectures/02_SMOKE/smoke_ros_ws/src/smoke/src/smoke_kitti_vis.py",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/src/smoke_ros_with_fusion.py",
		"/media/poledna/Poledna/05_fusion/02_smoke_ws/src/ros_bag_launch/launch/rosbag_smoke.launch",
		"/media/poledna/Poledna/05_fusion/02_smoke_ws/devel/setup.bash",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/msg/Kitti_Dettection_Format.msg",
		"/media/poledna/Poledna/05_fusion/03_aeberhard_ws/src/smoke/msg/Kitti_Detection_Array.msg"
	],
	"find":
	{
		"height": 38.0
	},
	"find_in_files":
	{
		"height": 158.0,
		"where_history":
		[
			"*.py",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"INFO",
			"try",
			"TRY",
			"return",
			"lock",
			"ObjectsList",
			"ObjectList",
			"RADARObjectList",
			"information_matrix_fusion",
			"global_state",
			"ClassificationFusion",
			"classification_fusion",
			"import di",
			"di",
			"temp_alignment",
			"ego_state",
			"Lock",
			"distance",
			"chi2",
			"sqrtm",
			"ObjectList",
			"TrafficUpdateMovingObject",
			"sqrtm",
			"chi2",
			"distance",
			"TrafficUpdateMovingObject",
			"ObjectsList",
			"ObjectList",
			"import",
			"Object_List",
			"SensorProperty",
			"ObjectsList",
			"ObjectList",
			"MovingObject",
			"existence_fusion",
			"infor",
			"info",
			"informa",
			"cross_covariance_recursion_fusion",
			"ClassificationFusion",
			"temp_alignment_",
			"temp_alignment_obj",
			"Track",
			"classification_fusion",
			"globaltrack_predicted.current_fused_object.geometric",
			"globaltrack_predicted.current_fused_object.geometric ",
			"global_state",
			"rotate",
			"classification_fusion()",
			"ClassificationFusion",
			"global_state",
			"classification_fusion",
			"existance_fusion",
			"existence_fusion",
			"fused_probability_existance",
			"global_existance_mass_factors",
			"get_fused_mass_factors",
			"self.",
			"mass_factor_combination",
			"existence_fusion",
			"get_fused_mass_factors",
			"existance_fusion",
			"classification_fusion",
			"ClassificationFusion",
			"existance_fusion",
			"existence_fusion_object_associated",
			"Existence_Fusion",
			"existance_fusion_object_assosiated",
			"chi2",
			"id",
			"features",
			"obj_list",
			"Ego",
			"Features",
			"distance",
			"TrafficUpdateMovingObject",
			"ObjectList",
			"ObjectsList",
			"sys",
			"np",
			"di",
			"distance",
			"di",
			"chi2",
			"TrafficUpdateMovingObject",
			"ObjectsList",
			"ObjectList",
			"Ego",
			"temp_alignment_obj",
			"SensorObject",
			"GlobalObject",
			"np",
			"sys",
			"math",
			"rospy",
			"TrafficUpdateMovingObject",
			"ObjectsList",
			"ObjectList",
			"sqrtm",
			"chi2",
			"distance",
			"rospy",
			"distance",
			"chi2",
			"sqrtm",
			"ObjectList",
			"TrafficUpdateMovingObject",
			"rotate",
			"TrafficUpdateMovingObject",
			"ObjectList",
			"ObjectsList",
			"information_matrix_fusion",
			"rotate",
			"evaluate_time",
			"Features"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"fused_classification",
			"ObjectList",
			"Detected_Object",
			"Moving_Object",
			"existence_fusion_object_associated",
			"_id"
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/object_fusion_pypkg/Fusion.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20444,
						"regions":
						{
						},
						"selection":
						[
							[
								13404,
								13404
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3915.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/fusion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 919,
						"regions":
						{
						},
						"selection":
						[
							[
								464,
								464
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/object_fusion_pypkg/Callback_Handler.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4667,
						"regions":
						{
						},
						"selection":
						[
							[
								298,
								298
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 522.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/inteface_adma_radar_fusion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6385,
						"regions":
						{
						},
						"selection":
						[
							[
								1736,
								1736
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1044.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"stack_multiselect": false,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/media/poledna/Poledna/06_fusion/03_aeberhard_ws/src/fusion/src/input_fusion.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2220,
						"regions":
						{
						},
						"selection":
						[
							[
								2099,
								2099
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 957.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 38.0
	},
	"input":
	{
		"height": 58.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.autopep8":
	{
		"height": 192.0
	},
	"output.exec":
	{
		"height": 186.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "fusion.sublime-project",
	"replace":
	{
		"height": 72.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 383.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
